//obst
#include <iostream>
#include <cstdlib>
#include <iomanip>
#define NMAX 20
using namespace std;
struct OBST {
    int KEY;
    OBST *left, *right;
};

int C[NMAX][NMAX]; // cost matrix
int W[NMAX][NMAX]; // weight matrix
int R[NMAX][NMAX]; // root matrix
int q[NMAX]; // unsuccessful searches
int p[NMAX]; // frequencies

int NUMBER_OF_KEYS; // number of keys in the tree
int KEYS[NMAX];
OBST *ROOT;

void COMPUTE_W_C_R() {
    int x, min;
    int i, j, k, h, m;

    // Construct weight matrix W
    for (i = 0; i <= NUMBER_OF_KEYS; i++) {
        W[i][i] = q[i];
        for (j = i + 1; j <= NUMBER_OF_KEYS; j++)
            W[i][j] = W[i][j - 1] + p[j] + q[j];
    }

    // Construct cost matrix C and root matrix R
    for (i = 0; i <= NUMBER_OF_KEYS; i++)
        C[i][i] = W[i][i];
    for (i = 0; i <= NUMBER_OF_KEYS - 1; i++) {
        j = i + 1;
        C[i][j] = C[i][i] + C[j][j] + W[i][j];
        R[i][j] = j;
    }
    for (h = 2; h <= NUMBER_OF_KEYS; h++)
        for (i = 0; i <= NUMBER_OF_KEYS - h; i++) {
            j = i + h;
            m = R[i][j - 1];
            min = C[i][m - 1] + C[m][j];
            for (k = m + 1; k <= R[i + 1][j]; k++) {
                x = C[i][k - 1] + C[k][j];
                if (x < min) {
                    m = k;
                    min = x;
                }
            }
            C[i][j] = W[i][j] + min;
            R[i][j] = m;
        }

    // Display weight matrix W
    cout << "\n The weight matrix W:\n";
    for (i = 0; i <= NUMBER_OF_KEYS; i++) {
        for (j = i; j <= NUMBER_OF_KEYS; j++)
            cout << setw(4) << W[i][j];
        cout << "\n";
    }

    // Display Cost matrix C
    cout << "\n The cost matrix C:\n";
    for (i = 0; i <= NUMBER_OF_KEYS; i++) {
        for (j = i; j <= NUMBER_OF_KEYS; j++)
            cout << setw(4) << C[i][j];
        cout << "\n";
    }

    // Display root matrix R
    std::cout << "\n The root matrix R:\n";
    for (i = 0; i <= NUMBER_OF_KEYS; i++) {
        for (j = i; j <= NUMBER_OF_KEYS; j++)
            cout << setw(4) << R[i][j];
        cout << "\n";
    }
}

// Construct the optimal binary search tree
OBST *CONSTRUCT_OBST(int i, int j) {
    OBST *p;

    if (i == j)
        p = nullptr;
    else {
        p = new OBST;
        p->KEY = KEYS[R[i][j]];
        p->left = CONSTRUCT_OBST(i, R[i][j] - 1); // left subtree
        p->right = CONSTRUCT_OBST(R[i][j], j); // right subtree
    }
    return p;
}

void OPTIMAL_BINARY_SEARCH_TREE() {
    float average_cost_per_weight;

    COMPUTE_W_C_R();
    cout << "C[0] = " << C[0][NUMBER_OF_KEYS] << " W[0] = " << W[0][NUMBER_OF_KEYS] << "\n";
    average_cost_per_weight = static_cast<float>(C[0][NUMBER_OF_KEYS]) / W[0][NUMBER_OF_KEYS];
    ROOT = CONSTRUCT_OBST(0, NUMBER_OF_KEYS);
}

int main() {
    int i;

    cout << "Input number of keys: ";
    cin >> NUMBER_OF_KEYS;
    for (i = 1; i <= NUMBER_OF_KEYS; i++) {
        cout << "key[" << i << "]= ";
        cin >> KEYS[i];
        cout << " frequency = ";
        cin >> p[i];
    }
    for (i = 0; i <= NUMBER_OF_KEYS; i++) {
        cout << "q[" << i << "] = ";
        cin >> q[i];
    }
        cout << "The OBST is";
            OPTIMAL_BINARY_SEARCH_TREE();

    }

